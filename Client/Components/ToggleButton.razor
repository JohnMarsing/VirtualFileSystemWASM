@using Client.Layout.Navigation


@inject ILogger<ToggleButton> Logger

<button class="btn @_buttonSize @_buttonColor!"
				@onclick="ButtonClicked" title="@_title">
	<i class="@_iconSize @_iconToggle"></i>
</button>


@code {

	[Parameter, EditorRequired] public bool CurrentBoolValue { get; set; }
	[Parameter, EditorRequired] public EventCallback<bool> OnToggleSelected { get; set; }
	[Parameter] public Client.Helpers.Enums.ButtonSize ButtonSize { get; set; }
	[Parameter] public string ButtonColorSelected { get; set; } = Anchors.BtnColors.Dark;
	[Parameter]	public string ButtonColorUnSelected { get; set; } = Anchors.BtnColors.Secondary;

	public bool _currentBoolValue { get; set; }
	protected string? _buttonSize; // btn-lg" : "btn-sm";
	protected string? _buttonColor;
	protected string? _iconSize;
	protected string? _title;
	protected string? _iconToggle;

	protected override void OnParametersSet()
	{
		Logger!.LogInformation("Inside razor {Class}{MethodEvent}; CurrentBoolValue: {CurrentBoolValue}"
		, nameof(ToggleButton), nameof(OnParametersSet), CurrentBoolValue);
		_currentBoolValue = CurrentBoolValue;

		_buttonSize = Client.Helpers.ButtonCss.Size(ButtonSize); 
		_iconSize = Client.Helpers.ButtonCss.IconSize(ButtonSize);
		UpdateUI();
	}

	private void ButtonClicked()
	{
		Logger!.LogInformation("Inside razor {Class}{MethodEvent}; _isDarkMode: {_isDarkMode}"
		, nameof(ToggleButton), nameof(ButtonClicked), _currentBoolValue);
		OnToggleSelected.InvokeAsync(!_currentBoolValue); // flip the boolean value
	}

	private void UpdateUI()
	{
		_buttonColor = _currentBoolValue! ? Anchors.BtnColors.Dark! : Anchors.BtnColors.Secondary!;
		_iconToggle = _currentBoolValue! ? "fas fa-toggle-on" : "fas fa-toggle-off";
		_title = _currentBoolValue! ? "Click to change Dark Mode to OFF" : "Click to change Dark Mode to ON";
	}



}

